/*
 * Copyright (c) 2023, WSO2 LLC. (http://www.wso2.org)
 *
 * WSO2 LLC. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

plugins {
    id 'java'
    id 'checkstyle'
    id 'com.github.spotbugs'
}

description = 'Ballerina - Mongodb Native'

configurations {
    dist {
        transitive true
    }
}

dependencies {
    checkstyle project(":checkstyle")
    checkstyle "com.puppycrawl.tools:checkstyle:${checkstylePluginVersion}"

    implementation group: 'org.ballerinalang', name: 'ballerina-runtime', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-lang', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'value', version: "${ballerinaLangVersion}"

    implementation group: 'org.slf4j', name: 'slf4j-api', version: "${slf4jVersion}"
    implementation group: 'org.mongodb', name: 'mongodb-driver-sync', version: "${mongoDriverVersion}"
    implementation group: 'org.mongodb', name: 'mongodb-driver-core', version: "${mongoDriverVersion}"
    implementation group: 'org.mongodb', name: 'bson', version: "${mongoDriverVersion}"
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    testLogging {
        showStackTraces = true
        showStandardStreams = true
        events "failed"
        exceptionFormat "full"
    }
    jacoco {
        enabled = true
        destinationFile = file("$buildDir/coverage-reports/jacoco.exec")
        includeNoLocationClasses = true
    }
}

spotbugsMain {
    def classLoader = plugins["com.github.spotbugs"].class.classLoader
    def SpotBugsConfidence = classLoader.findLoadedClass("com.github.spotbugs.snom.Confidence")
    def SpotBugsEffort = classLoader.findLoadedClass("com.github.spotbugs.snom.Effort")
    effort = SpotBugsEffort.MAX
    reportLevel = SpotBugsConfidence.LOW
    reportsDir = file("$project.buildDir/reports/spotbugs")
    def excludeFile = file("${rootDir}/build-config/spotbugs-exclude.xml")
    if (excludeFile.exists()) {
        it.excludeFilter = excludeFile
    }
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

spotbugsTest {
    enabled = false
}

tasks.withType(Checkstyle) {
    exclude '**/module-info.java'
}

checkstyle {
    toolVersion "${checkstylePluginVersion}"
    configFile file("${rootDir}/build-config/checkstyle/build/checkstyle.xml")
    configProperties = ["suppressionFile": file("${rootDir}/build-config/checkstyle/build/suppressions.xml")]
}

checkstyleMain.dependsOn ':checkstyle:downloadCheckstyleRuleFiles'

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    dependsOn configurations.dist
    from { configurations.dist.collect { it.isDirectory() ? it : zipTree(it) } } {
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    }
}

compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}
